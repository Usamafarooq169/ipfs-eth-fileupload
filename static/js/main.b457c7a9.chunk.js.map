{"version":3,"sources":["config/firebase.js","config/index.js","storehash.js","App.js","ipfs.js","web3.js","serviceWorker.js","index.js"],"names":["firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","web3","eth","Contract","App","state","ipfsHash","buffer","ethAddress","blockNumber","transactionHash","gasUsed","txReceipt","retrievedHash","fileName","filesRecordArr","addedFiles","captureFile","event","stopPropagation","preventDefault","file","target","files","fname","name","replace","console","log","reader","window","FileReader","readAsArrayBuffer","onloadend","convertToBuffer","setState","a","Buffer","from","result","onClick","getTransactionReceipt","err","getAccounts","accountss","storehash","methods","getFileRecord","call","error","retrievedFiles","filesRecord","Map","set","key","value","database","newFileInfoKey","ref","child","push","updates","update","onSubmit","ethereum","enable","accounts","options","address","ipfs","add","hash","addFileRecord","send","once","then","snapshot","forEach","childSnapshot","val","className","this","type","onChange","bsstyle","bordered","responsive","Component","require","host","port","protocol","Web3","currentProvider","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.b457c7a9.chunk.js","sourcesContent":["import * as firebase from 'firebase';\r\nimport {firebaseConfig} from \"./index\";\r\n\r\n  // Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\nexport var database = firebase.database();\r\n\r\nexport default firebase;","export var firebaseConfig = {\r\n    apiKey: \"AIzaSyBXul6_9013sKQiUH8yp-l_RdR_jEXVXEg\",\r\n    authDomain: \"ipfs-eth-fe4db.firebaseapp.com\",\r\n    databaseURL: \"https://ipfs-eth-fe4db.firebaseio.com/\",\r\n    projectId: \"ipfs-eth-fe4db\",\r\n    storageBucket: \"ipfs-eth-fe4db.appspot.com\",\r\n    messagingSenderId: \"785923819569\",\r\n    appId: \"1:785923819569:web:9aacd49d6cccaf39836d10\",\r\n    measurementId: \"G-N39YV7B09S\"\r\n  };\r\n\r\n","import web3 from './web3';\r\n//access our local copy to contract deployed on rinkeby testnet\r\n//use your own contract address\r\nconst address = '0x39b396c47C9670c26F2a67505F2Fb97c5f613908';\r\n//use the ABI from your contract\r\nconst abi = [\r\n\t{\r\n\t\t\"constant\": false,\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"name\": \"fileName\",\r\n\t\t\t\t\"type\": \"string\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"name\": \"fileAddress\",\r\n\t\t\t\t\"type\": \"string\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"addFileRecord\",\r\n\t\t\"outputs\": [],\r\n\t\t\"payable\": false,\r\n\t\t\"stateMutability\": \"nonpayable\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"constant\": true,\r\n\t\t\"inputs\": [],\r\n\t\t\"name\": \"getFileRecord\",\r\n\t\t\"outputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"name\": \"\",\r\n\t\t\t\t\"type\": \"string[]\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"payable\": false,\r\n\t\t\"stateMutability\": \"view\",\r\n\t\t\"type\": \"function\"\r\n\t}\r\n];\r\nexport default new web3.eth.Contract(abi, address);","import { Table, Container, Button, Form, Grid } from 'react-bootstrap';\nimport React, { Component } from 'react';\n//import logo from './logo.svg';\nimport './App.css';\nimport web3 from './web3';\nimport ipfs from './ipfs';\nimport storehash from './storehash';\nimport firebase from \"./config/firebase\";\n\nclass App extends Component {\n\n  state = {\n    ipfsHash: null,\n    buffer: '',\n    ethAddress: '',\n    blockNumber: '',\n    transactionHash: '',\n    gasUsed: '',\n    txReceipt: '',\n    retrievedHash: [],\n    fileName: '',\n    filesRecordArr : [],\n    addedFiles: []\n  };\n\n  componentDidMount(){\n    var ref = firebase.database().ref(\"filesInfo\").once('value').then((snapshot)=>{\n      const files = []; \n      snapshot.forEach(function(childSnapshot) {\n        \n        files.push({\n          key: childSnapshot.key,\n          ...childSnapshot.val()\n        });\n\n\n\n      });\n\n      this.setState({\n        addedFiles: files\n      } , ()=>console.log(this.state))\n    })\n   \n  }\n\n  captureFile = (event) => {\n    event.stopPropagation()\n    event.preventDefault()\n    const file = event.target.files[0]\n    \n    let fname = file.name\n    fname = fname.replace(/\\.[^/.]+$/, \"\")\n    // this.setState({ fileName: fname })\n    console.log(`File Name: ${fname}`)\n    let reader = new window.FileReader()\n    reader.readAsArrayBuffer(file)\n    reader.onloadend = () => this.convertToBuffer(reader)\n    this.setState({ fileName: fname })\n  };\n\n  convertToBuffer = async (reader) => {\n    //file is converted to a buffer to prepare for uploading to IPFS\n    const buffer = await Buffer.from(reader.result);\n    //set this buffer -using es6 syntax\n    this.setState({ buffer });\n  };\n\n  onClick = async () => {\n\n    try {\n      this.setState({ blockNumber: \"waiting..\" });\n      this.setState({ gasUsed: \"waiting...\" });\n\n      // get Transaction Receipt in console on click\n      // See: https://web3js.readthedocs.io/en/1.0/web3-eth.html#gettransactionreceipt\n      await web3.eth.getTransactionReceipt(this.state.transactionHash, (err, txReceipt) => {\n        console.log(err, txReceipt);\n        this.setState({ txReceipt });\n      }); //await for getTransactionReceipt\n\n      await this.setState({ blockNumber: this.state.txReceipt.blockNumber });\n      await this.setState({ gasUsed: this.state.txReceipt.gasUsed });\n\n      const accountss = await web3.eth.getAccounts();\n      storehash.methods.getFileRecord().call({\n        from: accountss[0]\n        }, (error, retrievedFiles) => {\n          // let str;\n          // for (let i = 0; i < retrievedHash.length; i++) {\n            console.log(`These are Files Stored:  ${retrievedFiles}`);\n            //this.setState({retrievedHash[i]});\n          // }\n        }); //getEnd\n\n        \n        let filesRecord = new Map();\n        const {fileName , ipfsHash} = this.state;\n        filesRecord.set(this.state.fileName, this.state.ipfsHash);\n        this.setState({ filesRecordArr: [...this.state.filesRecordArr, ...filesRecord ] });\n        for (let [key, value] of filesRecord) {\n          console.log(`This is File Record Mapping... Key: ${key} and the value: ${value}`);\n        }\n        console.log(`This is Record Array: ${this.state.filesRecordArr}`);\n        console.log(\"database \",firebase.database);\n\n        var newFileInfoKey = firebase.database().ref().child('filesInfo').push().key;\n        var updates = {};\n        updates['/filesInfo/' + newFileInfoKey] = { fileName , ipfsHash};\n        firebase.database().ref().update(updates);\n\n        // const apiUrl = 'https://api.github.com/users/hacktivist123/repos';\n        // fetch(apiUrl)\n        //   .then((response) => response.json())\n        //   .then((data) => console.log('This is your data', data));\n        \n        // console.log(`This is File Record Mapping: ${filesRecord}`);\n\n\n      \n\n           \n      \n    } //try\n    catch (error) {\n      console.log(error);\n    } //catch\n  } //onClick\n\n\n  onSubmit = async (event) => {\n    event.preventDefault();\n    window.ethereum.enable()\n    //bring in user's metamask account address\n    const accounts = await web3.eth.getAccounts();\n\n    console.log('Sending from Metamask account: ' + accounts[0]);\n\n    //obtain contract address from storehash.js\n    const ethAddress = await storehash.options.address;\n    this.setState({ ethAddress });\n\n    //save document to IPFS,return its hash#, and set hash# to state\n    //https://github.com/ipfs/interface-ipfs-core/blob/master/SPEC/FILES.md#add \n    await ipfs.add(this.state.buffer, (err, ipfsHash) => {\n      console.log(\"Trying\");\n      console.log(err, ipfsHash);\n      //setState by setting ipfsHash to ipfsHash[0].hash \n      this.setState({ ipfsHash: ipfsHash[0].hash });\n      //this.setState({ ipfsHash: ipfsHash[0]. });\n      console.log(`THis is IPFS hash: ${ipfsHash[0].hash}`);\n      // call Ethereum contract method \"sendHash\" and .send IPFS hash to etheruem contract \n      //return the transaction hash from the ethereum contract\n      //see, this https://web3js.readthedocs.io/en/1.0/web3-eth-contract.html#methods-mymethod-send\n\n      storehash.methods.addFileRecord(this.state.fileName, this.state.ipfsHash).send({\n        from: accounts[0]\n      }, (error, transactionHash) => {\n        console.log(`This is transaction hash:  ${transactionHash}`);\n        this.setState({ transactionHash });\n      }); //storehash\n\n      \n    }) //await ipfs.add \n      \n\n  }; //onSubmit \n\n\n  \n  // onPress = async () => {\n    \n  // }; //onPress \n\n\n\n  render() {\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1> BBSPI IPFS File Upload System </h1>\n        </header>\n\n        <hr />\n\n        <Container>\n          <h3> Choose file to upload to IPFS </h3>\n          <Form onSubmit={this.onSubmit}>\n            <input\n              type=\"file\"\n              onChange={this.captureFile}\n            />\n            <Button\n              bsstyle=\"primary\"\n              type=\"submit\">\n              Send it\n             </Button>\n          </Form>\n\n          <hr />\n          <Button onClick={this.onClick}> Get Transaction Receipt </Button>\n\n          <hr />\n          {/* <Button onClick = {this.onClick}> Show Uploaded Files </Button>\n          <hr /> */}\n\n          <Table bordered responsive>\n            <thead>\n              <tr>\n                <th>Tx Receipt Category</th>\n                <th>Values</th>\n              </tr>\n            </thead>\n\n            <tbody>\n              <tr>\n                <td>File Name</td>\n                <td>{this.state.fileName}</td>\n              </tr>\n              <tr>\n                <td>IPFS Hash # stored on Eth Contract</td>\n                <td>{this.state.ipfsHash}</td>\n              </tr>\n              <tr>\n                <td>Ethereum Contract Address</td>\n                <td>{this.state.ethAddress}</td>\n              </tr>\n\n              <tr>\n                <td>Tx Hash # </td>\n                <td>{this.state.transactionHash}</td>\n              </tr>\n\n              <tr>\n                <td>Block Number # </td>\n                <td>{this.state.blockNumber}</td>\n              </tr>\n\n              <tr>\n                <td>Gas Used</td>\n                <td>{this.state.gasUsed}</td>\n              </tr>\n            </tbody>\n          </Table>\n        </Container>\n      </div>\n    );\n  } //render\n}\n\nexport default App;","\r\nconst IPFS = require('ipfs-api');\r\nconst ipfs = new IPFS({ host: 'ipfs.infura.io', port: 5001, protocol: 'https' });\r\n\r\n// const ipfs = new IPFS({host: '127.0.0.1', port: '8080', protocol:'http'});\r\nexport default ipfs;    ","import Web3 from 'web3';\r\n\r\nconst web3 = new Web3(window.web3.currentProvider);\r\n\r\nexport default web3;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\n// import '../node_modules/bootstrap/dist/css/bootstrap-theme.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}